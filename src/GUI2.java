
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;
import javax.swing.text.Utilities;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author npilusa
 */
public class GUI2 extends javax.swing.JFrame {

    Model m;
    String text;
    String currentWord = "";
    String correction = "";
    boolean language = true;
    private File openedFile = null;
    private final String[] NOSUGGESTION = {"No suggestions"};
    Style defaultStyle = StyleContext.getDefaultStyleContext().
            getStyle(StyleContext.DEFAULT_STYLE);
    int position = 0; //The word position in the text area
    ArrayList<String> all = new ArrayList<>(); //Ignored all

    /**
     * Creates new form GUI2
     */
    public GUI2() {
        m = new Model("isixhosa"); //Default model used

        //Initiaze commponents
        style = StyleContext.getDefaultStyleContext();
        underline = style.addAttribute(style.getEmptySet(), StyleConstants.Underline, Boolean.TRUE);
        fore_red = style.addAttribute(underline, StyleConstants.Foreground, Color.RED);
        fore_blue = style.addAttribute(underline, StyleConstants.Foreground, Color.BLUE);
        fore_black = style.addAttribute(style.getEmptySet(), StyleConstants.Foreground, Color.BLACK);

        initComponents();
        FileFilter docFilter = new MyCustomFilter(".docx", "Microsoft Word Documents");
        FileFilter txtFilter = new MyCustomFilter(".txt", "Text Documents");

        fileChooser.addChoosableFileFilter(docFilter);
        fileChooser.addChoosableFileFilter(txtFilter);

        copyButton.addActionListener(new DefaultEditorKit.CopyAction());
        pasteButton.addActionListener(new DefaultEditorKit.PasteAction());

        //Edit option in toolbar
        cutMenuItem.addActionListener(new DefaultEditorKit.CutAction());
        copyMenuItem.addActionListener(new DefaultEditorKit.CopyAction());
        pasteMenuItem.addActionListener(new DefaultEditorKit.PasteAction());

        //Popup menu in textarea
        textPane.addMouseListener(new GUI2.PopupListener());
        popup.add(new JMenuItem(new DefaultEditorKit.CopyAction()));
        popup.add(new JMenuItem(new DefaultEditorKit.CutAction()));
        popup.add(new JMenuItem(new DefaultEditorKit.PasteAction()));

        //Instructions
        instruction.setText("Type or paste text or Click File -> Open file... to load a file!");
        instruction.setForeground(Color.BLUE);

        //Help window
        textarea = new JTextArea(50, 55);
        textarea.setEditable(false);
        helpPanel = new JPanel();
        helpPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        helpPanel.setLayout(new BorderLayout(5, 5));
        helpPanel.add(textarea, BorderLayout.CENTER);

        helpWindow = new JFrame("Help");
        helpWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        helpWindow.getContentPane().add(helpPanel);
        helpWindow.pack();
        helpWindow.setLocationByPlatform(true);
        helpWindow.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup = new javax.swing.JPopupMenu();
        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        change = new javax.swing.JButton();
        ignoreAll = new javax.swing.JButton();
        exit = new javax.swing.JButton();
        ignoreOnce = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        helpButton = new javax.swing.JButton();
        add = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        changeAll = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        suggestedWords = new javax.swing.JList<>();
        instruction = new javax.swing.JLabel();
        languageDropdown = new javax.swing.JComboBox<>();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        fileChooser.setDialogTitle("Select file");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                textPaneMouseClicked(evt);
            }
        });
        textPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textPaneKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(textPane);

        change.setText("Change");
        change.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeActionPerformed(evt);
            }
        });

        ignoreAll.setText("Ignore all");
        ignoreAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreAllActionPerformed(evt);
            }
        });

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        ignoreOnce.setText("Ignore once");
        ignoreOnce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreOnceActionPerformed(evt);
            }
        });

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        copyButton.setText("Copy");

        pasteButton.setText("Paste");
        pasteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        add.setText("Add to dictionary");
        add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionPerformed(evt);
            }
        });

        jLabel1.setText("Suggestions");

        changeAll.setText("Change all");
        changeAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                changeAllActionPerformed(evt);
            }
        });

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/logo.png"))); // NOI18N

        suggestedWords.setForeground(new java.awt.Color(175, 175, 175));
        suggestedWords.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "No suggestions" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        suggestedWords.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                suggestedWordsMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(suggestedWords);

        instruction.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        instruction.setText("This right here will be the instruction given to the user of the spellchecker as a guide.");

        languageDropdown.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "isiXhosa", "isiZulu" }));
        languageDropdown.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                languageDropdownItemStateChanged(evt);
            }
        });

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        openMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        saveAsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveAsMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        contentsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contentsMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(runButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(copyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pasteButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(helpButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(languageDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 218, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING))
                        .addGap(12, 12, 12))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(instruction, javax.swing.GroupLayout.PREFERRED_SIZE, 764, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(logo))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(ignoreOnce, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                            .addComponent(ignoreAll, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE)
                            .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE)
                            .addComponent(jLabel1)
                            .addComponent(change, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(changeAll, javax.swing.GroupLayout.DEFAULT_SIZE, 152, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))))
                .addGap(24, 24, 24))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {add, change, changeAll, ignoreAll, ignoreOnce});

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {clearButton, copyButton, exit, helpButton, pasteButton, runButton, saveButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(runButton)
                            .addComponent(saveButton)
                            .addComponent(copyButton)
                            .addComponent(pasteButton)
                            .addComponent(clearButton)
                            .addComponent(helpButton)
                            .addComponent(languageDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 513, Short.MAX_VALUE)
                        .addGap(23, 23, 23)
                        .addComponent(instruction))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(logo)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ignoreOnce, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ignoreAll, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(add)
                        .addGap(31, 31, 31)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(changeAll)
                        .addGap(18, 18, 18)
                        .addComponent(exit, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {add, change, changeAll, clearButton, copyButton, exit, helpButton, ignoreAll, ignoreOnce, languageDropdown, pasteButton, runButton, saveButton});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        //popup to confirm exit 
        if (JOptionPane.showConfirmDialog(rootPane, "Exit spellchecker?") == 0) {
            System.exit(0);
        }
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void ignoreOnceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreOnceActionPerformed
        // TODO add your handling code here:
        //Change the instructioin accordingly
        if (text.length() == 0) {
            instruction.setText("Type or paste text or Click File -> Open file... to load a file!");
            instruction.setForeground(Color.red);
            return;
        }

        text = textPane.getText();
        StyledDocument doc = textPane.getStyledDocument();
        doc.setCharacterAttributes(position, currentWord.length(), defaultStyle, true);

    }//GEN-LAST:event_ignoreOnceActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        //popup to confirm exit 
        if (JOptionPane.showConfirmDialog(rootPane, "Exit spellchecker?") == 0) {
            System.exit(0);
        }


    }//GEN-LAST:event_exitActionPerformed

    private void suggestedWordsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_suggestedWordsMouseClicked
        // TODO add your handling code here:
        if (evt.getClickCount() == 2) {
            // TODO Add method to change incorrect word to selected word                            
            StyledDocument doc = textPane.getStyledDocument();
            try {
                if (suggestedWords.getSelectedValue().equals(NOSUGGESTION[0])) {
                    return;
                }

                //Adds test to main text pane. This is incorrect
                doc.remove(position, currentWord.length());
                doc.insertString(position, suggestedWords.getSelectedValue(), fore_black);

                //Change replacment to default style 
                doc.setCharacterAttributes(position, suggestedWords.getSelectedValue().length(), defaultStyle, true);

            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_suggestedWordsMouseClicked

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed

        //Clear error highlights
        StyledDocument doc = textPane.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);

        //Remove text from textPane
        textPane.setText("");

        //Remove previous suggestions
        suggestedWords.setListData(NOSUGGESTION);
        suggestedWords.setForeground(Color.lightGray);

        if (textPane.getText().length() == 0) {
            instruction.setText("Nothing to clear");
            instruction.setForeground(Color.red);
        } else {
            instruction.setText("Text cleared! Start over.");
            instruction.setForeground(Color.BLUE);
        }
    }//GEN-LAST:event_clearButtonActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        text = textPane.getText();

        //Change the instructioin accordingly
        if (text.length() == 0) {
            instruction.setText("Type or paste text or Click File -> Open file... to load a file!");
            instruction.setForeground(Color.red);
            return;
        } else {
            instruction.setText("Double click on errors to make correction one at a time");
            instruction.setForeground(Color.BLUE);
        }

        String[] sentences = text.split("\n");
        String[] words;
        int start;
        int pos = 0;
        boolean noErrors = true;

        //Input is just a sentence or word
        for (int sentence = 0; sentence < sentences.length; sentence++) {
            words = sentences[sentence].split(" ");

            //iterate through words
            for (String word : words) {
                if (pos == 0) {
                    word = word.toLowerCase();
                }
                if (!all.contains(word) && !m.check(word)) {
                    start = text.indexOf(word, pos);
                    StyledDocument doc = textPane.getStyledDocument();
                    doc.setCharacterAttributes(start, word.length(), fore_red, true);
                    noErrors = false;
                }
                pos += word.length() + 1;
            }
        }

        //Change instruction
        if (noErrors) {
            instruction.setText("No errors detected!");
            instruction.setForeground(Color.BLUE);
        }
    }//GEN-LAST:event_runButtonActionPerformed

    private void ignoreAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreAllActionPerformed
        //Change the instructioin accordingly
        if (text.length() == 0) {
            instruction.setText("Type or paste text or Click File -> Open file... to load a file!");
            instruction.setForeground(Color.red);
            return;
        }

        text = textPane.getText();
        StyledDocument doc = textPane.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);

        instruction.setText("Click run to refresh errors");
        instruction.setForeground(Color.BLUE);

        //Add to dictionary of ignore all occurrances of the word 
        all.add(currentWord);
    }//GEN-LAST:event_ignoreAllActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
        try {
            InputStream ins = Isizulu_Spellchecker.class.getResourceAsStream("resources/Instructions.txt");
            BufferedReader insReader = new BufferedReader(new InputStreamReader(ins));
            textarea.read(insReader, ins);
            helpWindow.setVisible(true);

        } catch (IOException ex) {
            //Logger.getLogger(Spellchecker.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("File not found");
        }
    }//GEN-LAST:event_helpButtonActionPerformed

    private void addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionPerformed

        //Change the instructioin accordingly
        if (text.length() == 0) {
            instruction.setText("Type or paste textor Click File -> Open file... to load a file!");
            instruction.setForeground(Color.red);
            return;
        }
        text = textPane.getText();
        StyledDocument doc = textPane.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);

        instruction.setText("Click run to refresh errors");
        instruction.setForeground(Color.BLUE);

        //Add word to user dictionary
        m.addWord(currentWord);

    }//GEN-LAST:event_addActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here: return;
        saveMenuItemActionPerformed(evt);
    }//GEN-LAST:event_saveButtonActionPerformed

    private void languageDropdownItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_languageDropdownItemStateChanged
        // Change the langauge used by the model:
        String lang = languageDropdown.getModel().getSelectedItem().toString();
        m = new Model(lang);

        //Clear error highlights
        StyledDocument doc = textPane.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);

        //Remove previous suggestions
        suggestedWords.setListData(NOSUGGESTION);
        suggestedWords.setForeground(Color.lightGray);

        //Give aproprate instruction
        instruction.setText("Click run to refresh errors");
        instruction.setForeground(Color.BLUE);


    }//GEN-LAST:event_languageDropdownItemStateChanged

    private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
        // TODO add your handling code here:
        fileChooser.setDialogTitle("Open file");
        int returnVal = fileChooser.showOpenDialog(this);
        if (language) {
            instruction.setText("Click run to check for errors");
        } else {
            instruction.setText("Cofa uSebenzisa ukuze uhlole amaphutha");
        }
        instruction.setForeground(Color.BLUE);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            openedFile = fileChooser.getSelectedFile();
            String name = openedFile.getName();
            String ext = name.substring(name.indexOf("."), name.length());

            try {
                // What to do with the file, e.g. display it in a TextArea

                StyledDocument doc = textPane.getStyledDocument();
                doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);

                if (name.endsWith(".docx")) {
                    FileInputStream fis = new FileInputStream(openedFile.getAbsolutePath());
                    XWPFDocument docx = new XWPFDocument(fis);
                    List<XWPFParagraph> pars = docx.getParagraphs();
                    String toDisplay = "";
                    for (XWPFParagraph para : pars) {
                        toDisplay += para.getText() + "\n";
                    }

                    textPane.setText(toDisplay);
                    text = textPane.getText();
                    docx.close();
                } else {
                    textPane.read(new FileReader(openedFile.getAbsolutePath()), null);
                    text = textPane.getText(); //for controlling the displayed text
                }
            } catch (IOException ex) {
                System.out.println("problem accessing file" + openedFile.getAbsolutePath());
            }
        }

    }//GEN-LAST:event_openMenuItemActionPerformed

    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed
        // TODO add your handling code here:
        //Change the instructioin accordingly
        if (text.length() == 0) {
            instruction.setText("You are trying to save an empty file!");
            instruction.setForeground(Color.red);
            return;
        }

        fileChooser.setDialogTitle("Save file");
        int returnVal = fileChooser.showSaveDialog(this);
        if (openedFile == null) {
            openedFile = fileChooser.getSelectedFile();
        }
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            try {
                // What to do with the file, e.g. display it in a TextArea

                StyledDocument doc = textPane.getStyledDocument();
                doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);

                if (openedFile.getName().endsWith(".docx")) {
                    /*XWPFDocument document = new XWPFDocument();
                    XWPFParagraph tmpParagraph = document.createParagraph();
                    XWPFRun tmpRun = tmpParagraph.createRun();
                    tmpRun.setText(textPane.getText());
                    tmpRun.setFontSize(12);
                    document.write(new FileOutputStream(new File(file.getPath())));
                    document.close();*/
                } else {
                    textPane.write(new FileWriter(openedFile.getAbsolutePath()));//this file has no extension
                }
            } catch (IOException ex) {
                System.out.println("problem accessing file" + openedFile.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void saveAsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveAsMenuItemActionPerformed
        // TODO add your handling code here:
        //Change the instructioin accordingly
        if (text.length() == 0) {
            instruction.setText("You are trying to save an empty file!");
            instruction.setForeground(Color.red);
            return;
        }

        fileChooser.setDialogTitle("Save file as");
        int returnVal = fileChooser.showSaveDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            try {
                // What to do with the file, e.g. display it in a TextArea

                StyledDocument doc = textPane.getStyledDocument();
                doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);

                if (file.getName().endsWith(".docx")) {
                    /*XWPFDocument document = new XWPFDocument();
                    XWPFParagraph tmpParagraph = document.createParagraph();
                    XWPFRun tmpRun = tmpParagraph.createRun();
                    tmpRun.setText(textPane.getText());
                    tmpRun.setFontSize(12);
                    document.write(new FileOutputStream(new File(file.getPath())));
                    document.close();*/
                } else {
                    textPane.write(new FileWriter(file.getAbsolutePath()));//this file has no extension
                }
            } catch (IOException ex) {
                System.out.println("problem accessing file" + file.getAbsolutePath());
            }
        }
    }//GEN-LAST:event_saveAsMenuItemActionPerformed

    private void pasteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteButtonActionPerformed
        // TODO add your handling code here:
        //Clear error highlights
        StyledDocument doc = textPane.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);

        //Remove previous suggestions
        suggestedWords.setListData(NOSUGGESTION);
        suggestedWords.setForeground(Color.lightGray);


    }//GEN-LAST:event_pasteButtonActionPerformed

    private void textPaneMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_textPaneMouseClicked
        try {
            //Remove previous suggestions
            suggestedWords.setListData(NOSUGGESTION);
            suggestedWords.setForeground(Color.lightGray);

            if (evt.getClickCount() == 2) {//Double click a word to get suggestion
                String wrd = null;
                int pt = textPane.viewToModel(evt.getPoint());

                int spt = Utilities.getWordStart(textPane, pt);
                int ept = Utilities.getWordEnd(textPane, pt);
                wrd = textPane.getText(spt, ept - spt);

                if (wrd.length() > 0) {
                    ArrayList<String> suggestions = m.correct(wrd);
                    addSugg(suggestions);
                }
                currentWord = wrd;
                position = spt;
            }

        } catch (BadLocationException ex) {
            Logger.getLogger(GUI2.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_textPaneMouseClicked

    private void textPaneKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPaneKeyReleased
        // TODO add your handling code here:
        if (evt.isActionKey()) {
            //Remove previous suggestions
            suggestedWords.setListData(NOSUGGESTION);
            suggestedWords.setForeground(Color.lightGray);
            return;
        }

        StyledDocument doc = textPane.getStyledDocument();
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);
    }//GEN-LAST:event_textPaneKeyReleased

    private void changeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeActionPerformed

        try {

            if (suggestedWords.getSelectedValue() == null) {
                return;
            }

            StyledDocument doc = textPane.getStyledDocument();

            //Adds test to main text pane. This is incorrect
            doc.remove(position, currentWord.length());
            doc.insertString(position, suggestedWords.getSelectedValue(), fore_black);

            //Change replacement to default style 
            doc.setCharacterAttributes(position, suggestedWords.getSelectedValue().length(), defaultStyle, true);

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_changeActionPerformed

    private void changeAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_changeAllActionPerformed
        // TODO add your handling code here:
        if (suggestedWords.getSelectedValue() == null) {
            return;
        }

        StyledDocument doc = textPane.getStyledDocument();
        int index = textPane.getText().indexOf(currentWord);
        try {
            //Find all occurances
            while (index != -1) {

                //Remove occurance and insert suggested word
                doc.remove(index, currentWord.length());
                doc.insertString(index, suggestedWords.getSelectedValue().toString(), fore_black);

                //Change replacment to default style 
                doc.setCharacterAttributes(index, suggestedWords.getSelectedValue().toString().length(), defaultStyle, true);

                //Find next occurance
                index = textPane.getText().indexOf(currentWord);
                doc = textPane.getStyledDocument();
            }

        } catch (Exception e) {
            System.out.println(e);
        }


    }//GEN-LAST:event_changeAllActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed

        JOptionPane.showMessageDialog(null, "This spellchecker is awesome indeed\nIsiZulu and isiXhosa both in one.\nDesigned by the department of Computer Science at UCT .", "About", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void contentsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contentsMenuItemActionPerformed
        try {
            InputStream ins = Isizulu_Spellchecker.class.getResourceAsStream("resources/Instructions.txt");
            BufferedReader insReader = new BufferedReader(new InputStreamReader(ins));
            textarea.read(insReader, ins);
            helpWindow.setVisible(true);

        } catch (IOException ex) {
            //Logger.getLogger(Spellchecker.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("File not found");
        }
    }//GEN-LAST:event_contentsMenuItemActionPerformed

    public void addSugg(ArrayList<String> arr) {
        Collections.sort(arr, Collections.reverseOrder());
        String suggestions[] = new String[arr.size()];

        if (arr.isEmpty()) {
            suggestions = NOSUGGESTION;
            suggestedWords.setForeground(Color.lightGray);
        } else {
            for (int i = 0; i < arr.size(); i++) {
                if (i == 10) {
                    break;
                } else {
                    suggestions[i] = arr.get(i);
                }
            }

            suggestedWords.setForeground(Color.BLACK);
        }
        suggestedWords.setListData(suggestions);

    }

    /**
     * Cut, Copy and Paste Popup inside textPane.
     */
    private class PopupListener extends MouseAdapter {

        public void mousePressed(MouseEvent e) {
            showPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
            showPopup(e);
        }

        private void showPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                popup.show(e.getComponent(),
                        e.getX(), e.getY());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton add;
    private javax.swing.JButton change;
    private javax.swing.JButton changeAll;
    private javax.swing.JButton clearButton;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JButton copyButton;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton exit;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton helpButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton ignoreAll;
    private javax.swing.JButton ignoreOnce;
    private javax.swing.JLabel instruction;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JComboBox<String> languageDropdown;
    private javax.swing.JLabel logo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton pasteButton;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JPopupMenu popup;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JList<String> suggestedWords;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables

    //For highlighting incorrect word
    private final javax.swing.text.StyleContext style;
    private final javax.swing.text.AttributeSet underline;
    private final javax.swing.text.AttributeSet fore_red;
    private javax.swing.text.AttributeSet fore_blue;
    private javax.swing.text.AttributeSet fore_black;

    //Help window
    private final javax.swing.JFrame helpWindow;
    private final JPanel helpPanel;
    private final JTextArea textarea;
}
