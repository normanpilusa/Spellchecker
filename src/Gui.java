
import java.awt.BorderLayout;
import javax.swing.text.Highlighter;
import java.awt.Color;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.event.MouseInputAdapter;
import javax.swing.text.BadLocationException;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.DefaultHighlighter;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author npilusa
 */
public class Gui extends javax.swing.JFrame {

    Model m;
    String text;
    String currentWord = "";
    String correction = "";
    boolean language = true;

    //Markers
    int sentNo = 0;//Which sentence
    int wordNo = 0;//Which word in a sentence
    int pos = 0; //The word position in the text area
    boolean endOfText = false;
    boolean highlightSet = false; //Used to clear text area

    Highlighter.HighlightPainter painter = new DefaultHighlighter.DefaultHighlightPainter(Color.YELLOW);
    ArrayList<String> once = new ArrayList<>(); //Ignored once
    ArrayList<String> all = new ArrayList<>(); //Ignored all

    /**
     * Creates new form Gui
     */
    public Gui() {
        m = new Model();

        //Initiaze commponents
        style = StyleContext.getDefaultStyleContext();
        underline = style.addAttribute(style.getEmptySet(), StyleConstants.Underline, Boolean.TRUE);
        fore_red = style.addAttribute(underline, StyleConstants.Foreground, Color.RED);

        initComponents();

        //Edit option in toolbar
        cutMenuItem.addActionListener(new DefaultEditorKit.CutAction());
        copyMenuItem.addActionListener(new DefaultEditorKit.CopyAction());
        pasteMenuItem.addActionListener(new DefaultEditorKit.PasteAction());

        //Popup menu in textarea
        textPane.addMouseListener(new PopupListener());
        popup.add(new JMenuItem(new DefaultEditorKit.CopyAction()));
        popup.add(new JMenuItem(new DefaultEditorKit.CutAction()));
        popup.add(new JMenuItem(new DefaultEditorKit.PasteAction()));

        //Help window
        textarea = new JTextArea(40, 50);
        textarea.setEditable(false);

        helpPanel = new JPanel();
        helpPanel.setBorder(BorderFactory.createEmptyBorder(5, 5, 5, 5));
        helpPanel.setLayout(new BorderLayout(5, 5));
        helpPanel.add(textarea, BorderLayout.CENTER);

        helpWindow = new JFrame("Help");
        helpWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        helpWindow.getContentPane().add(helpPanel);
        helpWindow.pack();
        helpWindow.setLocationByPlatform(true);
        helpWindow.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        popup = new javax.swing.JPopupMenu();
        suggestionsLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        suggestionsPanel = new javax.swing.JTextPane();
        exit = new javax.swing.JButton();
        instruction = new javax.swing.JLabel();
        change = new javax.swing.JButton();
        changeAll = new javax.swing.JButton();
        ignoreOnce = new javax.swing.JButton();
        ignoreAll = new javax.swing.JButton();
        add = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        stepButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        logo = new javax.swing.JLabel();
        helpButton = new javax.swing.JButton();
        pasteButton = new javax.swing.JButton();
        copyButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        textPane = new javax.swing.JTextPane();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        openMenuItem = new javax.swing.JMenuItem();
        saveMenuItem = new javax.swing.JMenuItem();
        saveAsMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        cutMenuItem = new javax.swing.JMenuItem();
        copyMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        contentsMenuItem = new javax.swing.JMenuItem();
        aboutMenuItem = new javax.swing.JMenuItem();

        jButton1.setText("jButton1");

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        suggestionsLabel.setText("Suggestions");

        jScrollPane2.setViewportView(suggestionsPanel);

        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });

        instruction.setText("Instruction");

        change.setText("Change");

        changeAll.setText("Change all");

        ignoreOnce.setText("Ignore once");
        ignoreOnce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreOnceActionPerformed(evt);
            }
        });

        ignoreAll.setText("Ignore all");
        ignoreAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ignoreAllActionPerformed(evt);
            }
        });

        add.setText("Add to ..");

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        stepButton.setText("Step");
        stepButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stepButtonActionPerformed(evt);
            }
        });

        clearButton.setText("Clear");

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/resources/ukzn_logo.png"))); // NOI18N
        logo.setText("icon");

        helpButton.setText("Help");
        helpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpButtonActionPerformed(evt);
            }
        });

        pasteButton.setText("Paste");

        copyButton.setText("Copy");

        textPane.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textPaneKeyTyped(evt);
            }
        });
        jScrollPane3.setViewportView(textPane);

        fileMenu.setMnemonic('f');
        fileMenu.setText("File");

        openMenuItem.setMnemonic('o');
        openMenuItem.setText("Open");
        fileMenu.add(openMenuItem);

        saveMenuItem.setMnemonic('s');
        saveMenuItem.setText("Save");
        fileMenu.add(saveMenuItem);

        saveAsMenuItem.setMnemonic('a');
        saveAsMenuItem.setText("Save As ...");
        saveAsMenuItem.setDisplayedMnemonicIndex(5);
        fileMenu.add(saveAsMenuItem);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        editMenu.setMnemonic('e');
        editMenu.setText("Edit");

        cutMenuItem.setMnemonic('t');
        cutMenuItem.setText("Cut");
        editMenu.add(cutMenuItem);

        copyMenuItem.setMnemonic('y');
        copyMenuItem.setText("Copy");
        editMenu.add(copyMenuItem);

        pasteMenuItem.setMnemonic('p');
        pasteMenuItem.setText("Paste");
        editMenu.add(pasteMenuItem);

        deleteMenuItem.setMnemonic('d');
        deleteMenuItem.setText("Delete");
        editMenu.add(deleteMenuItem);

        menuBar.add(editMenu);

        helpMenu.setMnemonic('h');
        helpMenu.setText("Help");

        contentsMenuItem.setMnemonic('c');
        contentsMenuItem.setText("Contents");
        helpMenu.add(contentsMenuItem);

        aboutMenuItem.setMnemonic('a');
        aboutMenuItem.setText("About");
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2)
                            .addComponent(instruction, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(runButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(stepButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(saveButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(copyButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(pasteButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(clearButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(helpButton))
                                    .addComponent(suggestionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 710, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 4, Short.MAX_VALUE))
                            .addComponent(jScrollPane3))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(ignoreAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(ignoreOnce, javax.swing.GroupLayout.DEFAULT_SIZE, 191, Short.MAX_VALUE)
                                    .addComponent(add, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(exit, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(logo, javax.swing.GroupLayout.PREFERRED_SIZE, 166, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(16, 16, 16))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(changeAll, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(change, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(logo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ignoreOnce, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(ignoreAll, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(add)
                        .addGap(44, 44, 44))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(runButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(stepButton)
                                    .addComponent(clearButton)
                                    .addComponent(saveButton)
                                    .addComponent(helpButton)
                                    .addComponent(pasteButton)
                                    .addComponent(copyButton))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(suggestionsLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(change)
                        .addGap(18, 18, 18)
                        .addComponent(changeAll, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(15, 15, 15))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(instruction, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(exit, javax.swing.GroupLayout.DEFAULT_SIZE, 36, Short.MAX_VALUE))
                .addGap(25, 25, 25))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {add, change, changeAll, exit, ignoreAll, ignoreOnce});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void ignoreAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreAllActionPerformed
        // TODO add your handling code here:
        text = textPane.getText();
        StyledDocument doc = textPane.getStyledDocument();
        Style defaultStyle = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);
        String[] sentences = text.split("\n");
        String[] words;
        int start = 0;
        int end = 0;
        boolean active = true;

        if (text.length() == 0) {
            if (language) {
                instruction.setText("Type or paste text below or Click File -> Open file... to load a file!");
            } else {
                instruction.setText("Bhala noma namathelisela umbhalo olapha ngezansi noma > Cofa kuFayili > Vula ifayela...ukuze ufake ifayela.");
            }
            instruction.setForeground(Color.red);
            return;
        } else if (!highlightSet) {
            if (language) {
                instruction.setText("Click Run first!");
            } else {
                instruction.setText("Cofa uSebenzisa kuqala!");
            }
            instruction.setForeground(Color.red);
            return;
        } else if (pos >= text.length()) {
            if (language) {
                instruction.setText("You reached the end of your text. Click run to check again");
            } else {
                instruction.setText("Usufike esiphethweni sombhalo wakho. Cofa usebenzisa ukuze uhlole futhi");
            }
            instruction.setForeground(Color.BLUE);
            if (highlightSet) {
                if (!all.contains(currentWord)) {
                    all.add(currentWord);
                }
                highlightSet = false;
            }
            return;
        } else {
            all.add(currentWord);
        }

        //Input is just a sentence or word
        if (sentences.length < 2) {
            words = text.split(" ");

            //iterate through words
            for (int i = wordNo; i < words.length; i++) {
                String word = words[i];
                if (!all.contains(word) && !m.check(word)) {//incorrect word
                    start = text.indexOf(word, pos);
                    end = start + word.length();
                    /// doc.setCharacterAttributes(start, word.length(), fore_red, true);
                    currentWord = text.substring(start, end);
                    pos += word.length() + 1; //move to next word then stop
                    wordNo += 1;
                    break;
                }
                wordNo += 1;
                pos += word.length() + 1;
            }

            //Input is a two or more lines
        } else {
            while (sentNo < sentences.length && active) {
                words = sentences[sentNo].split(" ");
                //iterate through words
                for (int i = wordNo; i < words.length; i++) {
                    String word = words[i];
                    if (!all.contains(word) && !m.check(word)) {
                        start = text.indexOf(word, pos);
                        end = start + word.length();
                        /// doc.setCharacterAttributes(start, word.length(), fore_red, true);
                        currentWord = text.substring(start, end);
                        pos += word.length() + 1; //move to next word then stop
                        wordNo += 1;
                        active = false;
                        break;
                    }
                    wordNo += 1;
                    pos += word.length() + 1;
                }

                //Jump to next sentence
                if (wordNo >= words.length) {
                    wordNo = 0;
                    sentNo++;
                }
            }

        }
        if (pos >= text.length() && sentNo >= sentences.length) {
            if (language) {
                instruction.setText("You reached the end of your text. Click run to check again");
            } else {
                instruction.setText("Usufike esiphethweni sombhalo wakho. Cofa usebenzisa ukuze uhlole futhi");
            }
            instruction.setForeground(Color.BLUE);
            currentWord = "";
            return;
        }
        highlightSet = true;
    }//GEN-LAST:event_ignoreAllActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveButtonActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_exitActionPerformed

    private void helpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpButtonActionPerformed
        // TODO add your handling code here:
        try {
            InputStream ins = Isizulu_Spellchecker.class.getResourceAsStream("resources/Instructions.txt");
            BufferedReader insReader = new BufferedReader(new InputStreamReader(ins));
            textarea.read(insReader, ins);
            helpWindow.setVisible(true);

        } catch (IOException ex) {
            Logger.getLogger(Spellchecker.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println("File not found");
        }
    }//GEN-LAST:event_helpButtonActionPerformed

    private void textPaneKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textPaneKeyTyped
        // TODO add your handling code here:
        int len = textPane.getText().length();
        /*StyledDocument doc = textPane.getStyledDocument();
        Style defaultStyle = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);*/
        if (highlightSet && len != 0) {
            if (language) {
                instruction.setText("Click run to check the correctness of your changes or to continue to next error");
            } else {
                instruction.setText("Cofa usebenzisa ukuze uhlole ubunjalo kwezinguquko ozenzile noma udlulele ephutheni elilandelayo ");
            }
            instruction.setForeground(Color.blue);
            highlightSet = false;
        } else if (len == 0) {
            if (language) {
                instruction.setText("Type or paste text below or Click File -> Open file... to load a file!");
            } else {
                instruction.setText("Bhala noma namathelisela umbhalo olapha ngezansi noma > Cofa kuFayili > Vula ifayela...ukuze ufake ifayela.");
            }
            instruction.setForeground(Color.blue);
            if (highlightSet) {
                highlightSet = false;
            }
        } else {
            if (language) {
                instruction.setText("Click run to check for errors");
            } else {
                instruction.setText("Cofa uSebenzisa ukuze uhlole amaphutha");
            }
            instruction.setForeground(Color.blue);

        }
    }//GEN-LAST:event_textPaneKeyTyped

    private void ignoreOnceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ignoreOnceActionPerformed
        // TODO add your handling code here:
        text = textPane.getText();
        StyledDocument doc = textPane.getStyledDocument();
        Style defaultStyle = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);
        String[] sentences = text.split("\n");
        String[] words;
        int start = 0;
        int end = 0;
        boolean active = true;

        if (text.length() == 0) {
            if (language) {
                instruction.setText("Type or paste text below or Click File -> Open file... to load a file!");
            } else {
                instruction.setText("Bhala noma namathelisela umbhalo olapha ngezansi noma > Cofa kuFayili > Vula ifayela...ukuze ufake ifayela.");
            }
            instruction.setForeground(Color.red);
            return;
        } else if (!highlightSet) {
            if (language) {
                instruction.setText("Click Run first!");
            } else {
                instruction.setText("Cofa uSebenzisa kuqala!");
            }
            instruction.setForeground(Color.red);
            return;
        } else if (pos >= text.length()) {
            if (language) {
                instruction.setText("You reached the end of your text. Click run to check again");
            } else {
                instruction.setText("Usufike esiphethweni sombhalo wakho. Cofa usebenzisa ukuze uhlole futhi");
            }
            instruction.setForeground(Color.BLUE);
            return;
        } else {
            once.add(currentWord);
        }

        //Input is just a sentence or word
        if (sentences.length < 2) {
            words = text.split(" ");

            //iterate through words
            for (int i = wordNo; i < words.length; i++) {
                String word = words[i];
                if (!all.contains(word) && !m.check(word)) {//incorrect word
                    start = text.indexOf(word, pos);
                    end = start + word.length();
                    doc.setCharacterAttributes(start, word.length(), fore_red, true);
                    currentWord = text.substring(start, end);
                    pos += word.length() + 1; //move to next word then stop
                    wordNo += 1;
                    break;
                }
                wordNo += 1;
                pos += word.length() + 1;
            }

            //Input is a two or more lines
        } else {
            while (sentNo < sentences.length && active) {
                words = sentences[sentNo].split(" ");
                //iterate through words
                for (int i = wordNo; i < words.length; i++) {
                    String word = words[i];
                    if (!all.contains(word) && !m.check(word)) {
                        start = text.indexOf(word, pos);
                        end = start + word.length();
                        doc.setCharacterAttributes(start, word.length(), fore_red, true);
                        currentWord = text.substring(start, end);
                        pos += word.length() + 1; //move to next word then stop
                        wordNo += 1;
                        active = false;
                        break;
                    }
                    wordNo += 1;
                    pos += word.length() + 1;

                }

                //Jump to next sentence
                if (wordNo >= words.length) {
                    wordNo = 0;
                    sentNo++;
                }
            }

        }
        if (pos >= text.length() && sentNo >= sentences.length) {
            if (language) {
                instruction.setText("You reached the end of your text. Click run to check again");
            } else {
                instruction.setText("Usufike esiphethweni sombhalo wakho. Cofa usebenzisa ukuze uhlole futhi");
            }
            instruction.setForeground(Color.BLUE);
            currentWord = "";
            return;
        }
        highlightSet = true;
    }//GEN-LAST:event_ignoreOnceActionPerformed

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runButtonActionPerformed
        // TODO add your handling code here:
        text = textPane.getText();
        if (text.length() == 0) {
            if (language) {
                instruction.setText("Type or paste text below or Click File -> Open file... to load a file!");
            } else {
                instruction.setText("Bhala noma namathelisela umbhalo olapha ngezansi noma > Cofa kuFayili > Vula ifayela...ukuze ufake ifayela.");
            }
            instruction.setForeground(Color.red);
            return;
        } else if (noErrors()) {
            if (language) {
                instruction.setText("No errors detected!");
            } else {
                instruction.setText("Akukho maphutha atholakele");
            }
            instruction.setForeground(Color.BLUE);
            return;
        } else {
            if (language) {
                instruction.setText("Click Run to process errors one at a time");
            } else {
                instruction.setText("Cofa uSebenzisa ukuze ubheke iphutha ngalinye ngesikhathi");
            }
            instruction.setForeground(Color.BLUE);
        }
        String[] sentences = text.split("\n");
        String[] words;
        int start;
        //int end;
        int position = 0;
        int sentence = 0;

        //Input is just a sentence or word
        if (sentences.length < 2) {
            words = text.split(" ");

            //iterate through words
            for (String word : words) {
                //System.out.println(word);
                if (!all.contains(word) && !m.check(word)) {//incorrect word
                    start = text.indexOf(word, position);
                    //end = start + word.length();
                    StyledDocument doc = textPane.getStyledDocument();
                    doc.setCharacterAttributes(start, word.length(), fore_red, true);
                }
                position += word.length() + 1;
            }
            //Input is a two or more lines
        } else {
            while (sentence < sentences.length) {
                words = sentences[sentence].split(" ");
                //iterate through words
                for (String word : words) {
                    if (!all.contains(word) && !m.check(word)) {
                        start = text.indexOf(word, position);
                        //end = start + word.length();
                        StyledDocument doc = textPane.getStyledDocument();
                        doc.setCharacterAttributes(start, word.length(), fore_red, true);
                    }
                    position += word.length() + 1;
                }
                sentence++;
            }

        }
        highlightSet = true;
        //Resets globals used by other buttons such as ignoreAll
        pos = 0;
        sentNo = 0;
        wordNo = 0;
    }//GEN-LAST:event_runButtonActionPerformed

    private void stepButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stepButtonActionPerformed
        // TODO add your handling code here:
        //text = textPane.getText();
        StyledDocument doc = textPane.getStyledDocument();
        Style defaultStyle = StyleContext.getDefaultStyleContext().
                getStyle(StyleContext.DEFAULT_STYLE);
        doc.setCharacterAttributes(0, doc.getLength(), defaultStyle, true);
        try {
            text = doc.getText(0, doc.getLength());
        } catch (BadLocationException e) {
            e.printStackTrace();
        }
        if (text.length() == 0) {
            if (language) {
                instruction.setText("Type or paste text below or Click File -> Open file... to load a file!");
            } else {
                instruction.setText("Bhala noma namathelisela umbhalo olapha ngezansi noma > Cofa kuFayili > Vula ifayela...ukuze ufake ifayela.");
            }
            instruction.setForeground(Color.red);
            return;
        } else if (noErrors()) {
            if (language) {
                instruction.setText("No immediate errors detected!");
            } else {
                instruction.setText("Akukho maphutha atholakele");
            }
            instruction.setForeground(Color.BLUE);
            return;
        } else {
            if (language) {
                instruction.setText("Double click on incorrect word to view corrections.");
            } else {
                instruction.setText("Ufuna ukwenzani ngaleli phutha?");
            }
            instruction.setForeground(Color.BLUE);
            pos = 0;
            wordNo = 0;
            sentNo = 0;

        }

        String[] sentences = text.split("\n");
        String[] words;
        int start = 0;
        int end = 0;
        boolean active = true;

        //Input is just a sentence or word
        if (sentences.length < 2) {
            words = text.split(" ");

            //iterate through words
            for (int i = wordNo; i < words.length; i++) {
                String word = words[i];
                if (!all.contains(word) && !m.check(word)) {//incorrect word
                    ArrayList<String> suggest = m.correct(word);
                    //addSugg(word, suggest);
                    //System.out.println("AddSugg exited ==> "+word);
                    start = text.indexOf(word, pos);
                    end = start + word.length();
                    doc.setCharacterAttributes(start, word.length(), fore_red, true);
                    currentWord = text.substring(start, end);
                    pos += word.length() + 1; //move to next word then stop
                    wordNo += 1;
                    break;
                }
                wordNo += 1;
                pos += word.length() + 1;
            }

            //Input is a two or more lines
        } else {
            while (sentNo < sentences.length && active) {
                words = sentences[sentNo].split(" ");
                //iterate through words
                for (int i = wordNo; i < words.length; i++) {
                    String word = words[i];
                    if (!all.contains(word) && !m.check(word)) { //incorrect word
                        ArrayList<String> suggest = m.correct(word);
                        //addSugg(word, suggest);
                        start = text.indexOf(word, pos);
                        end = start + word.length();
                        //need to change the highlighter to hyperlink of text

                        start = text.indexOf(word, pos);
                        end = start + word.length();
                        doc.setCharacterAttributes(start, word.length(), fore_red, true);
                        currentWord = text.substring(start, end);
                        pos += word.length() + 1; //move to next word then stop
                        wordNo += 1;
                        active = false;
                        break;
                    }
                    wordNo += 1;
                    pos += word.length() + 1;
                }

                //Jump to next sentence
                if (wordNo >= words.length) {
                    wordNo = 0;
                    sentNo++;
                }
            }

        }
        highlightSet = true;

    }//GEN-LAST:event_stepButtonActionPerformed

    /**
     * Checks for all errors
     */
    private boolean noErrors() {
        String[] sentences = textPane.getText().split("\n");
        String[] words;
        int sentence = 0;

        if (sentences.length < 2) {
            words = textPane.getText().split(" ");
            //iterate through words
            for (String word : words) {
                if (!all.contains(word) && !m.check(word)) {//incorrect word
                    return false;
                }
            }
            //Input is a two or more lines
        } else {
            while (sentence < sentences.length) {
                words = sentences[sentence].split(" ");
                //iterate through words
                for (String word : words) {
                    if (!all.contains(word) && !m.check(word)) {
                        return false;
                    }
                }
                sentence++;
            }
        }
        return true;
    }

    /**
     * Cut, Copy and Paste Popup inside textPane. 
     */
    private class PopupListener extends MouseAdapter {

        public void mousePressed(MouseEvent e) {
            showPopup(e);
        }

        public void mouseReleased(MouseEvent e) {
            showPopup(e);
        }

        private void showPopup(MouseEvent e) {
            if (e.isPopupTrigger()) {
                popup.show(e.getComponent(),
                        e.getX(), e.getY());
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Gui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Gui().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JButton add;
    private javax.swing.JButton change;
    private javax.swing.JButton changeAll;
    private javax.swing.JButton clearButton;
    private javax.swing.JMenuItem contentsMenuItem;
    private javax.swing.JButton copyButton;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JMenu editMenu;
    private javax.swing.JButton exit;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JButton helpButton;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JButton ignoreAll;
    private javax.swing.JButton ignoreOnce;
    private javax.swing.JLabel instruction;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel logo;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenuItem openMenuItem;
    private javax.swing.JButton pasteButton;
    private javax.swing.JMenuItem pasteMenuItem;
    private javax.swing.JPopupMenu popup;
    private javax.swing.JButton runButton;
    private javax.swing.JMenuItem saveAsMenuItem;
    private javax.swing.JButton saveButton;
    private javax.swing.JMenuItem saveMenuItem;
    private javax.swing.JButton stepButton;
    private javax.swing.JLabel suggestionsLabel;
    private javax.swing.JTextPane suggestionsPanel;
    private javax.swing.JTextPane textPane;
    // End of variables declaration//GEN-END:variables

    //For highlighting incorrect word
    private final javax.swing.text.StyleContext style;
    private final javax.swing.text.AttributeSet underline;
    private final javax.swing.text.AttributeSet fore_red;

    //Help window
    private final javax.swing.JFrame helpWindow;
    private final JPanel helpPanel;
    private final JTextArea textarea;

}
